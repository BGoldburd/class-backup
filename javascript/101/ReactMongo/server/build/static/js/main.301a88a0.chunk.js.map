{"version":3,"sources":["Comment.js","AddComment.js","Post.js","Posts.js","AddPost.js","Login.js","Logout.js","App.js","serviceWorker.js","index.js"],"names":["Comment","_this$props$comment","this","props","comment","content","author","date","react_default","a","createElement","Fragment","Component","AddComment","addComment","fetch","concat","_this","postId","method","headers","Content-Type","body","JSON","stringify","refs","value","then","onComplete","catch","err","console","error","cancel","className","id","ref","onClick","Post","state","setState","addingComment","doneCommenting","_this$props$post","post","_id","title","comments","AddComment_AddComment","commentElems","map","c","index","Comment_Comment","key","Posts","posts","p","Post_Post","_this2","openSocket","on","commentData","Object","toConsumableArray","findIndex","objectSpread","push","json","AddPost","handleInputChange","event","target","type","checked","name","defineProperty","handleAddPost","preventDefault","history","onSubmit","onChange","Login","login","e","onLogin","password","register","onRegister","submit","placeholder","Logout","_ref","user","onLogout","App","res","ok","text","logout","Login_Login","Link","to","Switch","Route","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.301a88a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Comment extends Component {\r\n    render() {\r\n        const { content, author, date } = this.props.comment;\r\n        return (\r\n            <>\r\n                <h3>{content}</h3>\r\n                <h4>by {author} on {date}</h4>\r\n            </>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './AddComment.css';\r\n\r\nexport default class AddComment extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"addComment\">\r\n                <textarea id=\"content\" ref=\"content\"></textarea>\r\n                <button onClick={this.addComment}>add comment</button>\r\n                <button onClick={this.cancel}>cancel</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addComment = () => {\r\n        fetch(`/posts/${this.props.postId}/comments`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            // credentials: 'include',\r\n            body: JSON.stringify({ content: this.refs.content.value })\r\n        })\r\n            .then(() => this.props.onComplete())\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.onComplete();\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Comment from './Comment';\r\nimport AddComment from './AddComment';\r\n\r\nexport default class Post extends Component {\r\n    state = {};\r\n\r\n    render() {\r\n        const { _id, title, author, date, content, comments } = this.props.post;\r\n        const addComment = this.state.addingComment ? null : <button className=\"addComment\" onClick={this.addComment}>add comment</button>;\r\n        const addingComment = this.state.addingComment ? <AddComment postId={_id} onComplete={this.doneCommenting} /> : null;\r\n        const commentElems = comments ? comments.map((c, index) => (<Comment key={index} comment={c} />)) : null;\r\n        return (\r\n            <div className=\"post\" id={_id}>\r\n                <h2>{title}</h2>\r\n                <h3>by {author} on {date}</h3>\r\n                <div>{content}</div>\r\n                <div className=\"comments\">\r\n                    {addComment}\r\n                    {addingComment}\r\n                    {commentElems}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addComment = () => {\r\n        this.setState({\r\n            addingComment: !this.state.addingComment\r\n        });\r\n    }\r\n\r\n    doneCommenting = () => {\r\n        this.setState({\r\n            addingComment: false\r\n        });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Post from './Post';\r\nimport './Posts.css';\r\nimport openSocket from 'socket.io-client';\r\n\r\nexport default class Posts extends Component {\r\n    state = { posts: [] };\r\n\r\n    render() {\r\n        return this.state.posts.map(p => <Post key={p._id} post={p} />);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = openSocket('http://127.0.0.1');\r\n        socket.on('comment', commentData => {\r\n            const posts = [...this.state.posts]; // copy\r\n            const index = this.state.posts.findIndex(p => p._id === commentData.post);\r\n            const post = posts[index] = { ...posts[index] }; // copy\r\n            post.comments = post.comments || [];\r\n            post.comments.push(commentData.comment);\r\n\r\n            this.setState({\r\n                posts: posts\r\n            });\r\n        });\r\n\r\n        fetch('/posts'/*, { credentials: 'include' }*/)\r\n            .then(posts => posts.json())\r\n            .then(posts => this.setState({ posts }))\r\n            .catch(err => console.error(err));\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './AddPost.css';\r\n\r\nexport default class AddPost extends Component {\r\n    state = { title: '', content: '' };\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"addPost\" onSubmit={this.handleAddPost}>\r\n                <label>Title\r\n                    <input name=\"title\" onChange={this.handleInputChange} value={this.state.title} />\r\n                </label>\r\n                <label>Content\r\n                    <textarea name=\"content\" onChange={this.handleInputChange} value={this.state.content}></textarea>\r\n                </label>\r\n                <button>submit</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        /*const newState = {};\r\n        newState[name] = value;*/\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleAddPost = event => {\r\n        event.preventDefault();\r\n\r\n        fetch(`/posts/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            // credentials: 'include',\r\n            body: JSON.stringify({ title: this.state.title, content: this.state.content })\r\n        })\r\n            .then(() => this.props.history.push('/'))\r\n            .catch(err => console.error(err));\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submit}>\r\n                <input placeholder=\"name\" ref=\"name\" />\r\n                <input type=\"password\" placeholder=\"password\" ref=\"password\"></input>\r\n                <button onClick={this.login}>login</button>\r\n                <button onClick={this.register}>register</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    login = e => {\r\n        this.props.onLogin(this.refs.name.value, this.refs.password.value);\r\n        this.refs.name.value = '';\r\n        this.refs.password.value = '';\r\n    }\r\n\r\n    register = e => {\r\n        this.props.onRegister(this.refs.name.value, this.refs.password.value);\r\n        this.refs.name.value = '';\r\n        this.refs.password.value = '';\r\n    }\r\n\r\n    // chrome warns if use password not in form...\r\n    submit = e => {\r\n        e.preventDefault();\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default ({ user, onLogout }) => {\r\n    return (\r\n        <>Logged in as {user} <button onClick={onLogout}>logout</button></>\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Posts from './Posts';\nimport AddPost from './AddPost';\nimport Login from './Login';\nimport Logout from './Logout';\n\nclass App extends Component {\n    state = {};\n\n    render() {\n        return (\n            <>\n                <div className=\"errors\">{this.state.error}</div>\n                <header>\n                    {this.state.user ? <Logout user={this.state.user} onLogout={this.logout} /> : <Login onLogin={this.login} onRegister={this.register} />}\n                    <h1>React Mongo Socket IO Blog</h1>\n                    <h2>Welcome to the blog</h2>\n                    <Link to=\"/\">Home</Link> <Link to=\"/addPost\">Add Post</Link>\n                </header>\n\n                <Switch>\n                    <Route path=\"/\" exact component={Posts} />\n                    <Route path=\"/addPost/\" component={AddPost} />\n                    <Route render={props => (<div>404 Not found</div>)} />\n                </Switch>\n            </>\n        );\n    }\n\n    login = (name, password) => {\n        this.setState({ error: null });\n        fetch(`/login/`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            // credentials: 'include',\n            body: JSON.stringify({ name: name, password: password })\n        })\n            .then(res => {\n                if (res.ok) {\n                    this.setState({ user: name });\n                } else {\n                    this.setState({ error: \"login failed\" });\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ error: err });\n            });\n    }\n\n    register = (name, password) => {\n        this.setState({ error: null });\n        fetch(`/register/`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            // credentials: 'include',\n            body: JSON.stringify({ name: name, password: password })\n        })\n            .then(res => {\n                if (!res.ok) {\n                    res.text().then(text => {\n                        this.setState({ error: `registration failed: ${text}` });\n                    });\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ error: err });\n            });\n    }\n\n    logout = () => {\n        fetch('/logout'/*, { credentials: 'include' }*/)\n            .then(this.setState({ user: null }))\n            .catch(err => console.error(err));\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}